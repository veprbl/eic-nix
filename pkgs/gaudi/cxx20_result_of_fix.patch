commit 5328a00a147f9bbe374f6b3c19b29e58d5033c5a
Author: Dmitry Kalinkin <dmitry.kalinkin@gmail.com>
Date:   Tue Jul 12 19:19:29 2022 -0400

    Replace std::result_of_t with std::invoke_result_t following its deprecation in C++17
    
    This fixes the build against libc++ with -std=c++20, for which
    std::result_of_t is not declared.

diff --git a/GaudiKernel/include/Gaudi/Accumulators.h b/GaudiKernel/include/Gaudi/Accumulators.h
index 24f91eaf8..0bcaf3c1d 100644
--- a/GaudiKernel/include/Gaudi/Accumulators.h
+++ b/GaudiKernel/include/Gaudi/Accumulators.h
@@ -437,7 +437,11 @@ namespace Gaudi::Accumulators {
 
   public:
     using InputType             = InputTypeT;
+#if __cplusplus >= 201703L
+    using OutputType            = std::decay_t<std::invoke_result_t<OutputTransform, InnerType>>;
+#else
     using OutputType            = std::decay_t<std::result_of_t<OutputTransform( InnerType )>>;
+#endif
     using InternalType          = InnerType;
     using JSONStringEntriesType = std::string;
     GenericAccumulator operator+=( const InputType by ) {
diff --git a/GaudiKernel/include/GaudiKernel/ContextSpecificPtr.h b/GaudiKernel/include/GaudiKernel/ContextSpecificPtr.h
index f94759298..10caf35c4 100644
--- a/GaudiKernel/include/GaudiKernel/ContextSpecificPtr.h
+++ b/GaudiKernel/include/GaudiKernel/ContextSpecificPtr.h
@@ -82,7 +82,11 @@ namespace Gaudi {
       /// all the values corresponding to the contained pointers using init as
       /// first value.
       template <class Mapper>
+#if __cplusplus >= 201703L
+      auto accumulate( Mapper f, std::invoke_result_t<Mapper, const T*> init ) const -> decltype( init ) {
+#else
       auto accumulate( Mapper f, std::result_of_t<Mapper( const T* )> init ) const -> decltype( init ) {
+#endif
         return accumulate( f, init, std::plus<>() );
       }
 
@@ -90,7 +94,11 @@ namespace Gaudi {
       /// accumulated  result, through the operation 'op', of all the values
       /// corresponding to the contained pointers using init as first value.
       template <class Mapper, class BinaryOperation>
+#if __cplusplus >= 201703L
+      auto accumulate( Mapper f, std::invoke_result_t<Mapper, const T*> init, BinaryOperation op ) const
+#else
       auto accumulate( Mapper f, std::result_of_t<Mapper( const T* )> init, BinaryOperation op ) const
+#endif
           -> decltype( init ) {
         auto lock = std::scoped_lock{ m_ptrs_lock };
         return std::accumulate( m_ptrs.begin(), m_ptrs.end(), init, [&f, &op]( const auto& partial, const auto& p ) {
